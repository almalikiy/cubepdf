/* ------------------------------------------------------------------------- */
//
// Copyright (c) 2010 CubeSoft, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
/* ------------------------------------------------------------------------- */
using System.Linq;
using System.Windows.Media;
using Cube.FileSystem;
using Cube.Logging;
using Cube.Mixin.Commands;
using Cube.Mixin.String;
using Cube.Tests;
using NUnit.Framework;

namespace Cube.Pdf.Editor.Tests.Presenters
{
    /* --------------------------------------------------------------------- */
    ///
    /// OpenTest
    ///
    /// <summary>
    /// Tests Open commands of the MainViewModel class.
    /// </summary>
    ///
    /* --------------------------------------------------------------------- */
    [TestFixture]
    class OpenTest : VmFixture
    {
        #region Tests

        /* ----------------------------------------------------------------- */
        ///
        /// Open
        ///
        /// <summary>
        /// Tests the Open and Redraw commands.
        /// </summary>
        ///
        /* ----------------------------------------------------------------- */
        [TestCase("Sample.pdf",       ""        )]
        [TestCase("SampleAes128.pdf", "password")]
        public void Open(string file, string password)
        {
            using var vm = NewVM();
            using var z0 = vm.Boot(new()
            {
                Source   = GetSource(file),
                Password = password,
            });

            AssertObject(vm.Value.Images.First());
        }

        /* ----------------------------------------------------------------- */
        ///
        /// Open_BadFormat
        ///
        /// <summary>
        /// Tests the open method with a bad format file.
        /// </summary>
        ///
        /* ----------------------------------------------------------------- */
        [Test]
        public void Open_BadFormat()
        {
            var msg = string.Empty;

            using var vm = NewVM();
            using var z0 = vm.Hook(new() { Source = GetSource("Sample.txt") });
            using var z1 = vm.Subscribe<DialogMessage>(e => msg = e.Text);

            vm.Ribbon.Open.Command.Execute();
            Assert.That(Wait.For(() => msg.HasValue()), "Timeout");
            Assert.That(msg, Does.StartWith("File is not in PDF format or corrupted."));
            Assert.That(vm.Value.Source, Is.Null);
        }

        /* ----------------------------------------------------------------- */
        ///
        /// OpenLink
        ///
        /// <summary>
        /// Tests the OpenLink command.
        /// </summary>
        ///
        /* ----------------------------------------------------------------- */
        [Test]
        public void OpenLink()
        {
            var file = "Sample.pdf";
            Link(Get(file), GetSource(file));
            var src = Io.Get(Get($"{file}.lnk"));
            Assert.That(src.Exists);

            using var vm = NewVM();
            using var z0 = vm.Hook();

            vm.Test(() => vm.Recent.Open.Execute(src));
            Assert.That(vm.Value.Count, Is.EqualTo(9));

            var obj = vm.Value.Images.First();
            var cmp = vm.Value.Images.Preferences.Dummy;

            Assert.That(Wait.For(() => obj.Image != cmp), "Timeout");
            AssertObject(vm.Value.Images.First());
        }

        /* ----------------------------------------------------------------- */
        ///
        /// OpenLink_NotFound
        ///
        /// <summary>
        /// Tests the OpenLink command with the inexistent file.
        /// </summary>
        ///
        /* ----------------------------------------------------------------- */
        [Test]
        public void OpenLink_NotFound()
        {
            var tmp = Get("Sample.pdf");
            var src = $"{tmp}.lnk";
            Io.Copy(GetSource("Sample.pdf"), tmp, true);
            Link(src, tmp);
            GetType().LogWarn(() => Io.Delete(tmp));
            Assert.That(Io.Exists(src), Is.True,  src);
            Assert.That(Io.Exists(tmp), Is.False, tmp);

            using var vm = NewVM();
            using var z0 = vm.Hook();

            vm.Test(() => vm.Recent.Open.Execute(Io.Get(src)));
            Assert.That(vm.Value.Source, Is.Null);
        }

        /* ----------------------------------------------------------------- */
        ///
        /// OpenLink_Null
        ///
        /// <summary>
        /// Tests the OpenLink command with null.
        /// </summary>
        ///
        /* ----------------------------------------------------------------- */
        [Test]
        public void OpenLink_Null()
        {
            using var vm = NewVM();
            using var z0 = vm.Hook();

            Assert.That(vm.Open, Is.Not.Null);
            Assert.That(vm.Recent.Open, Is.Not.Null);
            Assert.That(vm.Recent.Open.CanExecute(), Is.False);
            Assert.That(vm.Value.Source, Is.Null);
        }

        #endregion

        #region Others

        /* ----------------------------------------------------------------- */
        ///
        /// Link
        ///
        /// <summary>
        /// Creates a link with the specified path.
        /// </summary>
        ///
        /* ----------------------------------------------------------------- */
        private void Link(string link, string src) => new Shortcut
        {
            FullName     = link,
            Target       = src,
            IconLocation = src,
        }.Create();

        /* ----------------------------------------------------------------- */
        ///
        /// AssertObject
        ///
        /// <summary>
        /// Confirms the properties of the specified object.
        /// </summary>
        ///
        /// <param name="src">Source object.</param>
        ///
        /* ----------------------------------------------------------------- */
        private void AssertObject(ImageItem src)
        {
            Assert.That(src.Index,     Is.EqualTo(0),     "Index");
            Assert.That(src.RawObject, Is.Not.Null,       "RawObject");
            Assert.That(src.Image,     Is.Not.Null,       "Image");
            Assert.That(src.Width,     Is.GreaterThan(0), "Width");
            Assert.That(src.Height,    Is.GreaterThan(0), "Height");
            Assert.That(src.Selected,  Is.False,          "Selected");
            Assert.That(src.Disposed,  Is.False,          "Disposed");
            Assert.That(src.Stretch,   Is.EqualTo(Stretch.UniformToFill));
        }

        #endregion
    }
}
